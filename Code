#include <iostream>
using namespace std;

void BestFit(int* memory, int blocksno, int* process, int prno)
{
    int* alloc = new int[prno];
    int y = 0;
    while (y < prno) {
        alloc[y] = -1;
        y++;
    }

    int i = 0;
    while (i < prno)
    {
        int index = -1;
        int j = 0;
        while (j < blocksno)
        {
            if (memory[j] >= process[i])
            {
                if (index == -1)
                {
                    index = j;
                }
                else if (memory[index] > memory[j])
                {
                    index = j;
                }
            }
            j++;
        }
        if (index != -1)
        {
            alloc[i] = index;
            memory[index] -= process[i];
        }
        i++;
    }

    cout << "\n Process No \t Process Size \t Block No\n";
    int x = 0;
    while (x < prno)
    {
        cout << " " << x + 1 << "\t\t";

        cout << process[x] << "\t\t";
        if (alloc[x] != -1)
        {
            cout << alloc[x] + 1;
        }
        else {
            cout << "Not allocated";
        }
        cout << "\n";
        x++;
    }
}
void firstFit(int* memory, int blocksno, int* process, int prno)
{
    int* alloc = new int[prno];
    int y = 0;
    while (y < prno) {
        alloc[y] = -1;
        y++;
    }


    int i = 0, j = 0;
    while (i < prno)
    {
        while (j < blocksno)
        {
            if (memory[j] >= process[i])
            {
                alloc[i] = j;
                memory[j] = 0;
                break;
            }
            j++;
        }
        i++;
    }


    cout << "\n Process No \t Process Size \t Block No\n";
    int x = 0;
    while (x < prno)
    {
        cout << " " << x + 1 << "\t\t";

        cout << process[x] << "\t\t";
        if (alloc[x] != -1)
        {
            cout << alloc[x] + 1;
        }
        else {
            cout << "Not allocated";
        }
        cout << "\n";
        x++;
    }
}

void worstFit(int* memory, int blocksno, int* process, int prno)
{
    int* alloc = new int[prno];
    int y = 0;
    while (y < prno) {
        alloc[y] = -1;
        y++;
    }

    int i = 0;
    while (i < prno)
    {
        int index = -1;
        int j = 0;
        while (j < blocksno)
        {
            if (memory[j] >= process[i])
            {
                if (index == -1)
                {
                    index = j;
                }
                else if (memory[index] < memory[j])
                {
                    index = j;
                }
            }
            j++;
        }
        if (index != -1)
        {
            alloc[i] = index;
            memory[index] = 0;
        }
        i++;
    }

    cout << "\n Process No \t Process Size \t Block No\n";
    int x = 0;
    while (x < prno)
    {
        cout << " " << x + 1 << "\t\t";

        cout << process[x] << "\t\t";
        if (alloc[x] != -1)
        {
            cout << alloc[x] + 1;
        }
        else {
            cout << "Not allocated";
        }
        cout << "\n";
        x++;
    }
}
int main(int argc, const char* argv[]) {

    int blockno = 0;
    int processno;

    while (blockno != -1)
    {
        cout << "Choose the number of blocks  or press -1 to close the program \n";
        cin >> blockno;
        if (blockno==-1) {
            break;
        }

        int* blocks = new int[blockno];



        cout << "Please fill the blocks' array\n";
        for (int i = 0; i < blockno; i++)
        {
            cin >> blocks[i];
        }

        cout << "Choose the number of processes\n ";
        cin >> processno;
        int* process = new int[processno];
        cout << "fill processes array\n";
        for (int i = 0; i < processno; i++)
        {
            cin >> process[i];
        }
        cout << "Choose 1 for best fit, 2 for worst fit, 3 for first fit ";
        int algo;
        cin >> algo;
        if (algo == 1)
        {
            BestFit(blocks, blockno, process, processno);
        }
        else if (algo == 2)
        {
            worstFit(blocks, blockno, process, processno);
        }
        else if (algo == 3)
        {
            firstFit(blocks, blockno, process, processno);
        }
        else
            cout << "Error! Please try again \n";
    }

}
